<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Ben's Blog of Webs]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://benjaminconant.github.io/"/>
  <updated>2014-11-17T02:13:12.591Z</updated>
  <id>http://benjaminconant.github.io/</id>
  
  <author>
    <name><![CDATA[Benjamin Conant]]></name>
    <email><![CDATA[conantbenjamin@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Hello internet user!]]></title>
    <link href="http://benjaminconant.github.io/2014/11/16/Why-Development/"/>
    <id>http://benjaminconant.github.io/2014/11/16/Why-Development/</id>
    <published>2014-11-16T23:39:00.000Z</published>
    <updated>2014-11-16T23:39:00.000Z</updated>
    <content type="html"><![CDATA[<p>I love programing because it is creative, challenging, and gives you the power to concretize.</p>
<p>What follows are my (hopefully) helpful thoughts on different web technologies, implementations, and anything else I come across or create that seems interesting enough to warrant being written about. </p>
]]></content>
    <summary type="html">
    <![CDATA[<p>I love programing because it is creative, challenging, and gives you the power to concretize.</p>
<p>What follows are my (hopefully) help]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Working with The New York Times, The Guardian, and Wikipedia APIs]]></title>
    <link href="http://benjaminconant.github.io/2014/11/13/Working-with-the-New-York-Times-Guardian-and-Wikipedia-APIs/"/>
    <id>http://benjaminconant.github.io/2014/11/13/Working-with-the-New-York-Times-Guardian-and-Wikipedia-APIs/</id>
    <published>2014-11-13T22:23:44.000Z</published>
    <updated>2014-11-17T02:12:04.000Z</updated>
    <content type="html"><![CDATA[<p>APIs are a hot topic for developers and entrepreneurs alike. An API is a way for different applications to communicate with each other by sending and receiving information. For example, your company may want to have a live feed of all tweets about itself displayed on its website. The way to access these tweets is to ask Twitter’s API for the relevant information. Twitter’s API will then send back the information your company wants and the code on your company’s website can display that information.</p>
<p>I recently had an idea for a web application that would return relevant search results by asking the APIs of various trusted news sources for any articles they had on the topic. Before beginning development, I scoured the internet for tutorials on how to use the three APIs I wanted use — <a href="http://developer.nytimes.com/docs" target="_blank" rel="external">The New York Times API</a>, <a href="http://www.theguardian.com/open-platform/content-api-content-search-reference-guide" target="_blank" rel="external">The Guardian API</a>, and the <a href="http://www.mediawiki.org/wiki/API:Main_page" target="_blank" rel="external">The MediaWiki API</a>. I did not find anything that showed me exactly how to implement what I wanted to do so now, after finishing my application, I am writing a quick tutorial that should get you up and running with these three free news APIs. </p>
<p>In the first section, I will throw up my HTML, CSS, and JavaScript code so that developers can read it and take from it the parts they need. In the second section, I will highlight the parts of the code that are most relevant to querying the three APIs my application communicates with and explain how they work. My hope is that this post will help anyone comfortable with HTML, CSS, jQuery, and JavaScript make the leap into working with APIs. For anyone interested in working with APIs but unfamiliar with the aforementioned technologies you can click the following links to some great resources for learning them — <a href="http://www.codecademy.com/en/tracks/web" target="_blank" rel="external">HTML & CSS</a>, <a href="http://www.codecademy.com/en/tracks/jquery" target="_blank" rel="external">jQuery</a>, <a href="http://www.codecademy.com/en/tracks/javascript" target="_blank" rel="external">JavaScript</a>. If you want all the code you can clone my project’s <a href="https://github.com/BenjaminConant/anchorbase" target="_blank" rel="external">GitHub repository</a> and if you want to see the site in action you can check out the <a href="http://benjaminconant.github.io/anchorbase/" target="_blank" rel="external">live site</a>. </p>
<p>Section 1 - The Code</p>
<p>HTML </p>
<figure class="highlight html"><figcaption><span>[index.html]  []</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="title">title</span>&gt;</span>Anchorbase | Find news better<span class="tag">&lt;/<span class="title">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="title">link</span> <span class="attribute">href</span>=<span class="value">"css/bootstrap.min.css"</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">media</span>=<span class="value">"screen"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">type</span>=<span class="value">"text/css"</span> <span class="attribute">href</span>=<span class="value">"index.css"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"container"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="title">h3</span> <span class="attribute">id</span>=<span class="value">"anchorbase-logo"</span> <span class="attribute">class</span>=<span class="value">"text-center"</span>&gt;</span>Anchorbase<span class="tag">&lt;/<span class="title">h3</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span> = "<span class="attribute">row</span>"&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"col-md-8 col-md-offset-2"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="title">form</span> <span class="attribute">id</span>=<span class="value">"search-bar"</span> <span class="attribute">class</span>=<span class="value">"span4"</span> <span class="attribute">role</span>=<span class="value">"form"</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"user-search"</span> <span class="attribute">class</span>=<span class="value">"form-control span3"</span> <span class="attribute">placeholder</span>=<span class="value">"Search news better"</span> <span class="attribute">autocomplete</span>=<span class="value">"off"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="title">form</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"row"</span> <span class="attribute">id</span>=<span class="value">"sortable"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"row-sort"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"col-md-4 text-center"</span> <span class="attribute">id</span>=<span class="value">"NYT"</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="title">table</span> <span class="attribute">id</span>=<span class="value">"NYT-results-table-header results-table-header"</span> <span class="attribute">class</span>=<span class="value">"NYT-results-table-header table table-bordered"</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="title">tr</span> <span class="attribute">class</span>=<span class="value">"NYT-results-header"</span>&gt;</span></div><div class="line">							<span class="tag">&lt;<span class="title">th</span> <span class="attribute">class</span>=<span class="value">"text-center"</span> &gt;</span>New York Times<span class="tag">&lt;/<span class="title">th</span>&gt;</span></div><div class="line">						<span class="tag">&lt;/<span class="title">tr</span>&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="title">table</span>&gt;</span> </div><div class="line">					<span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"NYT-results-table-scrolable-container"</span> <span class="attribute">class</span>=<span class="value">"results-table-scrolable-container"</span> &gt;</span></div><div class="line">						<span class="tag">&lt;<span class="title">table</span> <span class="attribute">id</span>=<span class="value">"NYT-results-table"</span> <span class="attribute">class</span>=<span class="value">"NYT-results-table table"</span>&gt;</span>						 		</div><div class="line">							<span class="tag">&lt;<span class="title">tr</span> <span class="attribute">id</span>=<span class="value">'NYT-last-row'</span>&gt;</span></div><div class="line">								<span class="tag">&lt;<span class="title">td</span>&gt;</span><span class="tag">&lt;/<span class="title">td</span>&gt;</span></div><div class="line">							<span class="tag">&lt;/<span class="title">tr</span>&gt;</span></div><div class="line">						<span class="tag">&lt;/<span class="title">table</span>&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="title">div</span>&gt;</span> </div><div class="line">				<span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"col-md-4 text-center"</span> <span class="attribute">id</span>=<span class="value">"Guardian"</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="title">table</span> <span class="attribute">id</span>=<span class="value">"G-results-table"</span> <span class="attribute">class</span>=<span class="value">"G-results-table table table table-bordered"</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="title">tr</span> <span class="attribute">class</span>=<span class="value">"guardian-results-header results-table-header"</span>&gt;</span></div><div class="line">							<span class="tag">&lt;<span class="title">th</span> <span class="attribute">class</span>=<span class="value">"text-center"</span> &gt;</span>The Guardian<span class="tag">&lt;/<span class="title">th</span>&gt;</span></div><div class="line">						<span class="tag">&lt;/<span class="title">tr</span>&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="title">table</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"guardian-results-table-scrolable-container"</span> <span class="attribute">class</span>=<span class="value">"results-table-scrolable-container"</span> &gt;</span></div><div class="line">						<span class="tag">&lt;<span class="title">table</span> <span class="attribute">id</span>=<span class="value">"guardian-results-table"</span> <span class="attribute">class</span>=<span class="value">"guardian-results-table table"</span>&gt;</span>	</div><div class="line">							<span class="tag">&lt;<span class="title">tr</span> <span class="attribute">id</span>=<span class="value">'guardian-last-row'</span>&gt;</span></div><div class="line">								<span class="tag">&lt;<span class="title">td</span>&gt;</span><span class="tag">&lt;/<span class="title">td</span>&gt;</span></div><div class="line">							<span class="tag">&lt;/<span class="title">tr</span>&gt;</span></div><div class="line">						<span class="tag">&lt;/<span class="title">table</span>&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"col-md-4 text-center"</span> <span class="attribute">id</span>=<span class="value">"Wiki"</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="title">table</span> <span class="attribute">id</span>=<span class="value">"G-results-table"</span> <span class="attribute">class</span>=<span class="value">"G-results-table table table table-bordered"</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="title">tr</span> <span class="attribute">class</span>=<span class="value">"G-results-header results-table-header"</span>&gt;</span></div><div class="line">							<span class="tag">&lt;<span class="title">th</span> <span class="attribute">class</span>=<span class="value">"text-center"</span> &gt;</span>Wikipedia<span class="tag">&lt;/<span class="title">th</span>&gt;</span></div><div class="line">						<span class="tag">&lt;/<span class="title">tr</span>&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="title">table</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"wikipedia-results-table-scrolable-container"</span> <span class="attribute">class</span>=<span class="value">"results-table-scrolable-container"</span> &gt;</span></div><div class="line">						<span class="tag">&lt;<span class="title">table</span> <span class="attribute">id</span>=<span class="value">"wikipeida-results-table"</span> <span class="attribute">class</span>=<span class="value">"wikipeida-results-table table"</span>&gt;</span>	</div><div class="line">							<span class="tag">&lt;<span class="title">tr</span> <span class="attribute">id</span>=<span class="value">'wikipedia-last-row'</span>&gt;</span></div><div class="line">								<span class="tag">&lt;<span class="title">td</span>&gt;</span><span class="tag">&lt;/<span class="title">td</span>&gt;</span></div><div class="line">							<span class="tag">&lt;/<span class="title">tr</span>&gt;</span></div><div class="line">						<span class="tag">&lt;/<span class="title">table</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="title">div</span>&gt;</span>	</div><div class="line">						<span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="title">div</span>&gt;</span>	</div><div class="line">		<span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"http://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"</span> &gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"http://code.jquery.com/ui/1.11.2/jquery-ui.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">'text/javascript'</span> <span class="attribute">src</span>=<span class="value">'js/jquery.js'</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">		$(<span class="string">'#sortable &gt; .row-sort'</span>).sortable();</div><div class="line">	}); </div><div class="line">	<span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></div></pre></td></tr></table></figure>

<p>CSS custom</p>
<figure class="highlight css"><figcaption><span>[index.css] []</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="id">#anchorbase-logo</span> <span class="rules">{</span></div><div class="line">	<span class="rule"><span class="attribute">margin-top</span>:<span class="value"> <span class="number">100px</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="id">#search-bar</span> <span class="rules">{</span></div><div class="line">	<span class="rule"><span class="attribute">margin-top</span>:<span class="value"> <span class="number">30px</span></span></span>;</div><div class="line">	<span class="rule"><span class="attribute">margin-bottom</span>:<span class="value"> <span class="number">40px</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="class">.results-table-scrolable-container</span><span class="rules">{</span></div><div class="line">	<span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">500px</span></span></span>;</div><div class="line">	<span class="rule"><span class="attribute">overflow</span>:<span class="value"> hidden</span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="class">.results-table-scrolable-container</span><span class="pseudo">:hover</span> <span class="rules">{</span></div><div class="line">	<span class="rule"><span class="attribute">overflow</span>:<span class="value"> auto</span></span>;</div><div class="line">	<span class="rule"><span class="attribute">overflow-y</span>:<span class="value"> scroll</span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="class">.NYT-results-header</span><span class="rules">{</span></div><div class="line">	<span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">0px</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="class">.NYT-results-header</span><span class="pseudo">:hover</span> <span class="rules">{</span></div><div class="line"><span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#f3fbfb</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="class">.guardian-results-header</span><span class="pseudo">:hover</span> <span class="rules">{</span></div><div class="line"><span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#f3fbfb</span></span></span>;	</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="class">.G-results-header</span><span class="pseudo">:hover</span> <span class="rules">{</span></div><div class="line"><span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#f3fbfb</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="class">.form-control</span><span class="pseudo">:focus</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">border-color</span>:<span class="value"> <span class="hexcolor">#D8F2F3</span></span></span>;</div><div class="line"> <span class="rule">}</span></div><div class="line"><span class="pseudo">::-webkit-scrollbar</span> <span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">-webkit-appearance</span>:<span class="value"> none</span></span>;</div><div class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">7px</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="pseudo">::-webkit-scrollbar-thumb</span> <span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">4px</span></span></span>;</div><div class="line">    <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="function">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">5</span>)</span></span>;</div><div class="line">    <span class="rule"><span class="attribute">-webkit-box-shadow</span>:<span class="value"> <span class="number">0</span> <span class="number">0</span> <span class="number">1px</span> <span class="function">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,.<span class="number">5</span>)</span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>


<p>CSS Bootstrap<br>My project’s styling relies on Twitter’s Bootstrap front-end framework. You will notice that my HTML file includes class tags that are not defined in the custom CSS style sheet I pasted above. This is because bootstrap provides you with an extensive library of pre-defined classes that allow you to quickly make your HTML both stylish and responsive. You can learn more about how bootstrap works by <a href="http://getbootstrap.com/css/" target="_blank" rel="external">reading the documentation</a> and you can <a href="http://getbootstrap.com/getting-started/" target="_blank" rel="external">download bootstrap </a> to install it in your project. </p>
<p>JavaScript, jQuery, and AJAX</p>
<figure class="highlight JavaScript"><figcaption><span>[jquery.js] []</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{	</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> userSearchTerm = <span class="string">""</span>,</div><div class="line">        </div><div class="line">        NYTapiKey = <span class="string">"--------------google New York Times API key to get your own free key and then paste it here as a string---------------------------"</span>,</div><div class="line">        NYTtimesShown = <span class="number">0</span>,</div><div class="line">        NYTresultsArray = [],</div><div class="line">        </div><div class="line">        guardianApiKey = <span class="string">"----------google Guardian API key to get your own free key and then paste it here as a string--------------------------"</span>,</div><div class="line">        guardianTimesShown = <span class="number">1</span>,</div><div class="line">        guardianResultsArray = [],</div><div class="line">        wikipediaResultsArray =[],</div><div class="line"></div><div class="line">        wikipediaContinueString = <span class="string">""</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ResultsObject</span><span class="params">(url, headline, leadParagraph, index)</span> </span>{</div><div class="line">        <span class="keyword">this</span>.url = url;</div><div class="line">        <span class="keyword">this</span>.headline = headline;</div><div class="line">        <span class="keyword">this</span>.leadParagraph = leadParagraph;</div><div class="line">        <span class="keyword">this</span>.index = index;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">var</span> apiCallNYT = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</div><div class="line">        $.ajax({</div><div class="line">            url: <span class="string">"http://api.nytimes.com/svc/search/v2/articlesearch.json?q="</span> + userSearchTerm.replace(<span class="string">' '</span>, <span class="string">'+'</span>) + <span class="string">"&amp;page="</span> + NYTtimesShown + <span class="string">"&amp;api-key="</span> + NYTapiKey,  </div><div class="line">            dataType: <span class="string">'json'</span>,</div><div class="line">            success: <span class="function"><span class="keyword">function</span><span class="params">(results)</span></span>{</div><div class="line">                <span class="keyword">var</span> resultsString = <span class="built_in">JSON</span>.stringify(results),</div><div class="line">                    resultsObject = results,</div><div class="line">                    documentsArray = resultsObject[<span class="string">'response'</span>][<span class="string">'docs'</span>];</div><div class="line">               </div><div class="line">                documentsArray.forEach(<span class="function"><span class="keyword">function</span><span class="params">(element, index, array)</span></span>{</div><div class="line">                    <span class="keyword">if</span> (element[<span class="string">'web_url'</span>] == <span class="literal">null</span> || element[<span class="string">'headline'</span>][<span class="string">'main'</span>] == <span class="literal">null</span> || element[<span class="string">'lead_paragraph'</span>] == <span class="literal">null</span>) {</div><div class="line">                    } <span class="keyword">else</span> {</div><div class="line">                    article = <span class="keyword">new</span> ResultsObject(element[<span class="string">'web_url'</span>], element[<span class="string">'headline'</span>][<span class="string">'main'</span>], element[<span class="string">'lead_paragraph'</span>],  NYTresultsArray.length);</div><div class="line">                    NYTresultsArray.push(article);</div><div class="line">                    }</div><div class="line">                });</div><div class="line">                resultsPrintNYT(NYTresultsArray);</div><div class="line">                NYTtimesShown++;</div><div class="line">            }</div><div class="line">        });</div><div class="line">    };</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> resultsPrintNYT = <span class="function"><span class="keyword">function</span><span class="params">(resultsArray)</span></span>{</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; resultsArray.length; i++){</div><div class="line">            <span class="keyword">if</span> (resultsArray[i] !== <span class="literal">undefined</span>) {</div><div class="line">                $(<span class="string">"&lt;tr id='NYTresult"</span>+resultsArray[i].index+<span class="string">"'&gt;&lt;td class='text-left NYTresult'&gt;&lt;a href='"</span> + resultsArray[i].url + <span class="string">"'&gt;"</span> + resultsArray[i].headline +<span class="string">"&lt;/a&gt;&lt;p&gt;"</span> + resultsArray[i].leadParagraph + <span class="string">"&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;"</span>).insertBefore(<span class="string">'#NYT-last-row'</span>);</div><div class="line">            } </div><div class="line">        }</div><div class="line">    };</div><div class="line"></div><div class="line">    <span class="keyword">var</span> apiCallGaurdain = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{        </div><div class="line">        $.ajax({</div><div class="line">            url: <span class="string">"http://content.guardianapis.com/search?api-key="</span>+guardianApiKey+<span class="string">"&amp;show-fields=all&amp;page="</span>+ guardianTimesShown + <span class="string">"&amp;q="</span>+userSearchTerm.replace(<span class="string">' '</span>, <span class="string">'%'</span>),</div><div class="line">            dataType: <span class="string">'jsonp'</span>,</div><div class="line">            success: <span class="function"><span class="keyword">function</span><span class="params">( results )</span> </span>{</div><div class="line">            <span class="keyword">var</span> results = results;</div><div class="line">            <span class="comment">//console.log(results);</span></div><div class="line">            <span class="keyword">var</span> documentsArray = results[<span class="string">'response'</span>][<span class="string">'results'</span>];</div><div class="line">            <span class="comment">//console.log(documentsArray);</span></div><div class="line"></div><div class="line">            documentsArray.forEach(<span class="function"><span class="keyword">function</span><span class="params">(element, index, array)</span></span>{</div><div class="line">                    <span class="keyword">if</span> (element[<span class="string">'webUrl'</span>] == <span class="literal">null</span> || element[<span class="string">'webTitle'</span>] == <span class="literal">null</span> || element[<span class="string">'fields'</span>][<span class="string">'standfirst'</span>] == <span class="literal">null</span>) {</div><div class="line">                    } <span class="keyword">else</span> {</div><div class="line">                    article = <span class="keyword">new</span> ResultsObject(element[<span class="string">'webUrl'</span>], element[<span class="string">'webTitle'</span>], element[<span class="string">'fields'</span>][<span class="string">'standfirst'</span>],  guardianResultsArray.length);</div><div class="line">                    guardianResultsArray.push(article);</div><div class="line">                    }</div><div class="line">                });</div><div class="line">                resultsPrintGuardian(guardianResultsArray);</div><div class="line">                guardianTimesShown++;</div><div class="line">            }</div><div class="line">        });</div><div class="line">    };</div><div class="line"></div><div class="line">    <span class="keyword">var</span> resultsPrintGuardian = <span class="function"><span class="keyword">function</span><span class="params">(resultsArray)</span></span>{</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; resultsArray.length; i++){</div><div class="line">            <span class="keyword">if</span> (resultsArray[i] !== <span class="literal">undefined</span>) {</div><div class="line">                $(<span class="string">"&lt;tr id='guardianResult"</span>+resultsArray[i].index+<span class="string">"'&gt;&lt;td class='text-left guardianResult'&gt;&lt;a href='"</span> + resultsArray[i].url + <span class="string">"'&gt;"</span> + resultsArray[i].headline +<span class="string">"&lt;/a&gt;&lt;p&gt;"</span> + resultsArray[i].leadParagraph + <span class="string">"&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;"</span>).insertBefore(<span class="string">'#guardian-last-row'</span>);</div><div class="line">            } </div><div class="line">        }</div><div class="line">    };</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">var</span> apiCallWikipedia = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</div><div class="line">        $.ajax({</div><div class="line">            url: <span class="string">"http://en.wikipedia.org/w/api.php?format=json&amp;action=query&amp;generator=allpages&amp;gaplimit=10&amp;gapfrom="</span>+ userSearchTerm.replace(<span class="string">' '</span>, <span class="string">'+'</span>)+<span class="string">"&amp;prop=pageimages|extracts&amp;pilimit=max&amp;exintro&amp;explaintext&amp;exsentences=1&amp;exlimit=max&amp;gapcontinue="</span> + wikipediaContinueString,</div><div class="line">            dataType: <span class="string">'jsonp'</span>,</div><div class="line">            success: <span class="function"><span class="keyword">function</span><span class="params">(results)</span> </span>{</div><div class="line">            <span class="keyword">var</span> results = results;</div><div class="line">            <span class="built_in">console</span>.log(results);</div><div class="line">            <span class="keyword">var</span> documentsArray = results[<span class="string">'query'</span>][<span class="string">'pages'</span>];</div><div class="line">            <span class="built_in">console</span>.log(documentsArray);</div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">typeof</span> documentsArray);</div><div class="line">            wikipediaContinueString = results[<span class="string">'query-continue'</span>][<span class="string">'allpages'</span>][<span class="string">'gapcontinue'</span>];</div><div class="line"></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> documentsArray) {</div><div class="line">                <span class="keyword">if</span> (documentsArray.hasOwnProperty(prop)){</div><div class="line">                    article = <span class="keyword">new</span> ResultsObject( <span class="string">"https://en.wikipedia.org/wiki/"</span>+ <span class="built_in">encodeURI</span>(documentsArray[prop][<span class="string">'title'</span>]), documentsArray[prop][<span class="string">'title'</span>], documentsArray[prop][<span class="string">'extract'</span>],  wikipediaResultsArray.length)</div><div class="line">                    wikipediaResultsArray.push(article);</div><div class="line">                }</div><div class="line">            }</div><div class="line">                 resultsPrintWikipedia(wikipediaResultsArray);</div><div class="line">                 <span class="built_in">console</span>.log(wikipediaResultsArray);</div><div class="line">            }</div><div class="line">        });</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">var</span> resultsPrintWikipedia = <span class="function"><span class="keyword">function</span><span class="params">(resultsArray)</span></span>{</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; resultsArray.length; i++){</div><div class="line">            <span class="keyword">if</span> (resultsArray[i] !== <span class="literal">undefined</span>) {</div><div class="line"></div><div class="line">                $(<span class="string">"&lt;tr id='wikipeidaResult"</span>+resultsArray[i].index+<span class="string">"'&gt;&lt;td class='text-left wikipediaResult'&gt;&lt;a href='"</span> + resultsArray[i].url + <span class="string">"'&gt;"</span> + resultsArray[i].headline +<span class="string">"&lt;/a&gt;&lt;p&gt;"</span> + resultsArray[i].leadParagraph + <span class="string">"&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;"</span>).insertBefore(<span class="string">'#wikipedia-last-row'</span>);</div><div class="line">            } </div><div class="line">        }</div><div class="line">    };</div><div class="line">   </div><div class="line">    $(<span class="string">'#search-bar'</span>).bind(<span class="string">'keypress'</span>,<span class="function"><span class="keyword">function</span> <span class="params">(event)</span></span>{</div><div class="line">        <span class="keyword">if</span> (event.keyCode === <span class="number">13</span>){</div><div class="line">            event.preventDefault();</div><div class="line">            </div><div class="line">            userSearchTerm = $(<span class="string">'#user-search'</span>).val();</div><div class="line">            </div><div class="line">            NYTtimesShown = <span class="number">0</span>;</div><div class="line">            NYTresultsArray = [];</div><div class="line">            $(<span class="string">'.NYTresult'</span>).remove();</div><div class="line">            </div><div class="line">            guardianTimesShown =<span class="number">1</span>;</div><div class="line">            guardianResultsArray = [];</div><div class="line">            $(<span class="string">'.guardianResult'</span>).remove();</div><div class="line"></div><div class="line">            wikipediaContinueString = <span class="string">""</span>;</div><div class="line">            wikipediaResultsArray =[];</div><div class="line">            $(<span class="string">'.wikipediaResult'</span>).remove();</div><div class="line"></div><div class="line"></div><div class="line">            apiCallWikipedia();</div><div class="line">            apiCallNYT();</div><div class="line">            apiCallGaurdain();</div><div class="line">        }</div><div class="line">    });</div><div class="line"></div><div class="line">    $(<span class="string">'#NYT-results-table-scrolable-container'</span>).bind(<span class="string">'scroll'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">        <span class="keyword">if</span>($(<span class="keyword">this</span>).scrollTop() + $(<span class="keyword">this</span>).innerHeight() &gt;= <span class="keyword">this</span>.scrollHeight) {</div><div class="line">            guardianResultsArray = [];</div><div class="line">            apiCallNYT();</div><div class="line">        }</div><div class="line">    });</div><div class="line"></div><div class="line">    $(<span class="string">'#guardian-results-table-scrolable-container'</span>).bind(<span class="string">'scroll'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">        <span class="keyword">if</span>($(<span class="keyword">this</span>).scrollTop() + $(<span class="keyword">this</span>).innerHeight() &gt;= <span class="keyword">this</span>.scrollHeight) {</div><div class="line">            guardianResultsArray =[];</div><div class="line">            apiCallGaurdain();</div><div class="line">        }</div><div class="line">    });</div><div class="line"></div><div class="line">    $(<span class="string">'#wikipedia-results-table-scrolable-container'</span>).bind(<span class="string">'scroll'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">        <span class="keyword">if</span>($(<span class="keyword">this</span>).scrollTop() + $(<span class="keyword">this</span>).innerHeight() &gt;= <span class="keyword">this</span>.scrollHeight) {</div><div class="line">            wikipediaResultsArray =[];</div><div class="line">            apiCallWikipedia();</div><div class="line">        }</div><div class="line">    });</div><div class="line"></div><div class="line">});</div></pre></td></tr></table></figure>

<p>Section 2 - Explanation</p>
<p>The index.html and index.css files combined with Bootstrap control how the app appears on the the screen. It was important to set the container divs for the API results to have a set height on the page but to become scrollable when the user’s mouse hovers over them. This way I could ask the API, the results from which the user was scrolling through, to produce the next set of results once the user had almost scrolled down to the bottom of the div. I achieved this with the following custom CSS class and jQuery event handlers. </p>
<p>CSS</p>
<figure class="highlight css"><figcaption><span>[index.css] []</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class">.results-table-scrolable-container</span><span class="rules">{</span></div><div class="line">	<span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">500px</span></span></span>;</div><div class="line">	<span class="rule"><span class="attribute">overflow</span>:<span class="value"> hidden</span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="class">.results-table-scrolable-container</span><span class="pseudo">:hover</span> <span class="rules">{</span></div><div class="line">	<span class="rule"><span class="attribute">overflow</span>:<span class="value"> auto</span></span>;</div><div class="line">	<span class="rule"><span class="attribute">overflow-y</span>:<span class="value"> scroll</span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p>jQuery</p>
<figure class="highlight javascript"><figcaption><span>[jquery.js] []</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#NYT-results-table-scrolable-container'</span>).bind(<span class="string">'scroll'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">if</span>($(<span class="keyword">this</span>).scrollTop() + $(<span class="keyword">this</span>).innerHeight() &gt;= <span class="keyword">this</span>.scrollHeight) {</div><div class="line">        guardianResultsArray = [];</div><div class="line">        apiCallNYT();</div><div class="line">    }</div><div class="line">});</div><div class="line"></div><div class="line">$(<span class="string">'#guardian-results-table-scrolable-container'</span>).bind(<span class="string">'scroll'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">if</span>($(<span class="keyword">this</span>).scrollTop() + $(<span class="keyword">this</span>).innerHeight() &gt;= <span class="keyword">this</span>.scrollHeight) {</div><div class="line">        guardianResultsArray =[];</div><div class="line">        apiCallGaurdain();</div><div class="line">    }</div><div class="line">});</div><div class="line"></div><div class="line">$(<span class="string">'#wikipedia-results-table-scrolable-container'</span>).bind(<span class="string">'scroll'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">if</span>($(<span class="keyword">this</span>).scrollTop() + $(<span class="keyword">this</span>).innerHeight() &gt;= <span class="keyword">this</span>.scrollHeight) {</div><div class="line">        wikipediaResultsArray =[];</div><div class="line">        apiCallWikipedia();</div><div class="line">    }</div><div class="line">});</div></pre></td></tr></table></figure>


<p>In the CSS we can see that all my results container divs have the same set height and hidden overflow when they are not being hovered over. This will keep the page organized and prevent different results div from becoming different heights depending on how many results are sent back by their corresponding API. Then when the user hovers a mouse over them, their overflow is set to scroll, allowing for the user to scroll down through all the results.</p>
<p>In the jQuery we can see that when an API result container is scrolled down to the bottom it will trigger a resetting of the API results array (the data structure that hold all the API results before they are added to the DOM) and then calls the function that asks that specific API for the next batch of results. The result is three “infinitely” scrolling divs that ask for more information from their corresponding API when and only when the user has scrolled down through the current batch of results. It may seem odd to reset the array that holds the search results from that API before calling the function that asks the API for results. This happens because my app does not store old API information on the backend. Instead I just print the results to the DOM and insert new results below. I do this to demonstrate how you could parse the information returned by an API into objects that you could then store permanently in a database but there is no reason to store results for the purpose of my app. </p>
<p>Now let us examine the functions that actually ask for, and then parse into objects, information from the APIs. These are the functions that the three jQuery event handlers above call when a user has scrolled to the bottom of one of them.</p>
<figure class="highlight javascript"><figcaption><span>[jquery.js] []</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> userSearchTerm = <span class="string">""</span>,</div><div class="line">       </div><div class="line">       NYTapiKey = <span class="string">"--------------google New York Times API key to get your own free key and then paste it here as a string---------------------------"</span>,</div><div class="line">       NYTtimesShown = <span class="number">0</span>,</div><div class="line">       NYTresultsArray = [],</div><div class="line">       </div><div class="line">       guardianApiKey = <span class="string">"--------------google Guardian API key to get your own free key and then paste it here as a string---------------------------"</span>,</div><div class="line">       guardianTimesShown = <span class="number">1</span>,</div><div class="line">       guardianResultsArray = [],</div><div class="line">       wikipediaResultsArray =[],</div><div class="line"></div><div class="line">       wikipediaContinueString = <span class="string">""</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> apiCallNYT = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</div><div class="line">       $.ajax({</div><div class="line">           url: <span class="string">"http://api.nytimes.com/svc/search/v2/articlesearch.json?q="</span> + userSearchTerm.replace(<span class="string">' '</span>, <span class="string">'+'</span>) + <span class="string">"&amp;page="</span> + NYTtimesShown + <span class="string">"&amp;api-key="</span> + NYTapiKey,  </div><div class="line">           dataType: <span class="string">'json'</span>,</div><div class="line">           success: <span class="function"><span class="keyword">function</span><span class="params">(results)</span></span>{</div><div class="line">               <span class="keyword">var</span> resultsString = <span class="built_in">JSON</span>.stringify(results),</div><div class="line">                   resultsObject = results,</div><div class="line">                   documentsArray = resultsObject[<span class="string">'response'</span>][<span class="string">'docs'</span>];</div><div class="line">              </div><div class="line">               documentsArray.forEach(<span class="function"><span class="keyword">function</span><span class="params">(element, index, array)</span></span>{</div><div class="line">                   <span class="keyword">if</span> (element[<span class="string">'web_url'</span>] == <span class="literal">null</span> || element[<span class="string">'headline'</span>][<span class="string">'main'</span>] == <span class="literal">null</span> || element[<span class="string">'lead_paragraph'</span>] == <span class="literal">null</span>) {</div><div class="line">                   } <span class="keyword">else</span> {</div><div class="line">                   article = <span class="keyword">new</span> ResultsObject(element[<span class="string">'web_url'</span>], element[<span class="string">'headline'</span>][<span class="string">'main'</span>], element[<span class="string">'lead_paragraph'</span>],  NYTresultsArray.length);</div><div class="line">                   NYTresultsArray.push(article);</div><div class="line">                   }</div><div class="line">               });</div><div class="line">               resultsPrintNYT(NYTresultsArray);</div><div class="line">               NYTtimesShown++;</div><div class="line">           }</div><div class="line">       });</div><div class="line">   };</div><div class="line"></div><div class="line">   <span class="keyword">var</span> apiCallGaurdain = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{        </div><div class="line">       $.ajax({</div><div class="line">           url: <span class="string">"http://content.guardianapis.com/search?api-key="</span>+guardianApiKey+<span class="string">"&amp;show-fields=all&amp;page="</span>+ guardianTimesShown + <span class="string">"&amp;q="</span>+userSearchTerm.replace(<span class="string">' '</span>, <span class="string">'%'</span>),</div><div class="line">           dataType: <span class="string">'jsonp'</span>,</div><div class="line">           success: <span class="function"><span class="keyword">function</span><span class="params">( results )</span> </span>{</div><div class="line">           <span class="keyword">var</span> results = results;</div><div class="line">           <span class="comment">//console.log(results);</span></div><div class="line">           <span class="keyword">var</span> documentsArray = results[<span class="string">'response'</span>][<span class="string">'results'</span>];</div><div class="line">           <span class="comment">//console.log(documentsArray);</span></div><div class="line"></div><div class="line">           documentsArray.forEach(<span class="function"><span class="keyword">function</span><span class="params">(element, index, array)</span></span>{</div><div class="line">                   <span class="keyword">if</span> (element[<span class="string">'webUrl'</span>] == <span class="literal">null</span> || element[<span class="string">'webTitle'</span>] == <span class="literal">null</span> || element[<span class="string">'fields'</span>][<span class="string">'standfirst'</span>] == <span class="literal">null</span>) {</div><div class="line">                   } <span class="keyword">else</span> {</div><div class="line">                   article = <span class="keyword">new</span> ResultsObject(element[<span class="string">'webUrl'</span>], element[<span class="string">'webTitle'</span>], element[<span class="string">'fields'</span>][<span class="string">'standfirst'</span>],  guardianResultsArray.length);</div><div class="line">                   guardianResultsArray.push(article);</div><div class="line">                   }</div><div class="line">               });</div><div class="line">               resultsPrintGuardian(guardianResultsArray);</div><div class="line">               guardianTimesShown++;</div><div class="line">           }</div><div class="line">       });</div><div class="line">   };</div><div class="line"></div><div class="line">   <span class="keyword">var</span> apiCallWikipedia = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</div><div class="line">       $.ajax({</div><div class="line">           url: <span class="string">"http://en.wikipedia.org/w/api.php?format=json&amp;action=query&amp;generator=allpages&amp;gaplimit=10&amp;gapfrom="</span>+ userSearchTerm.replace(<span class="string">' '</span>, <span class="string">'+'</span>)+<span class="string">"&amp;prop=pageimages|extracts&amp;pilimit=max&amp;exintro&amp;explaintext&amp;exsentences=1&amp;exlimit=max&amp;gapcontinue="</span> + wikipediaContinueString,</div><div class="line">           dataType: <span class="string">'jsonp'</span>,</div><div class="line">           success: <span class="function"><span class="keyword">function</span><span class="params">(results)</span> </span>{</div><div class="line">           <span class="keyword">var</span> results = results;</div><div class="line">           <span class="built_in">console</span>.log(results);</div><div class="line">           <span class="keyword">var</span> documentsArray = results[<span class="string">'query'</span>][<span class="string">'pages'</span>];</div><div class="line">           <span class="built_in">console</span>.log(documentsArray);</div><div class="line">           <span class="built_in">console</span>.log(<span class="keyword">typeof</span> documentsArray);</div><div class="line">           wikipediaContinueString = results[<span class="string">'query-continue'</span>][<span class="string">'allpages'</span>][<span class="string">'gapcontinue'</span>];</div><div class="line"></div><div class="line">           <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> documentsArray) {</div><div class="line">               <span class="keyword">if</span> (documentsArray.hasOwnProperty(prop)){</div><div class="line">                   article = <span class="keyword">new</span> ResultsObject( <span class="string">"https://en.wikipedia.org/wiki/"</span>+ <span class="built_in">encodeURI</span>(documentsArray[prop][<span class="string">'title'</span>]), documentsArray[prop][<span class="string">'title'</span>], documentsArray[prop][<span class="string">'extract'</span>],  wikipediaResultsArray.length)</div><div class="line">                   wikipediaResultsArray.push(article);</div><div class="line">               }</div><div class="line">           }</div><div class="line">                resultsPrintWikipedia(wikipediaResultsArray);</div><div class="line">                <span class="built_in">console</span>.log(wikipediaResultsArray);</div><div class="line">           }</div><div class="line">       });</div><div class="line">   }</div></pre></td></tr></table></figure>

<p>At the top of this snippet from my jquery.js file, I define a number of variables that are essential for getting our API querying functions to work properly. Let’s take a look at them —</p>
<figure class="highlight javascript"><figcaption><span>[jquery.js] []</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> userSearchTerm = <span class="string">""</span>,</div><div class="line">       </div><div class="line">       NYTapiKey = <span class="string">"--------------google New York Times API key to get your own free key and then paste it here as a string---------------------------"</span>,</div><div class="line">       NYTtimesShown = <span class="number">0</span>,</div><div class="line">       NYTresultsArray = [],</div><div class="line">       </div><div class="line">       guardianApiKey = <span class="string">"--------------google Guardian API key to get your own free key and then paste it here as a string---------------------------"</span>,</div><div class="line">       guardianTimesShown = <span class="number">1</span>,</div><div class="line">       guardianResultsArray = [],</div><div class="line">       </div><div class="line">       wikipediaResultsArray =[],</div><div class="line">       wikipediaContinueString = <span class="string">""</span>;</div></pre></td></tr></table></figure>

<p>userSearchTerm is exactly what it sounds like, it will eventually contain the search term that the user enters into the search bar at the top of the page. We need the search term so we can pass it into our API call and get only results that are relevant to that search. Most APIs requre you to pass a key along with your request for information. This allows the API to identify who is asking for information and how many times that person asks for information. APIs that require a key will not work without one so be sure to get your own API key and enter it as a string value for the NYTapiKey and guardianApiKey variables before trying to run the above code. When you ask for data from an API it will often return only the first n results that match your request. The reason for this is efficiency. If every time a program asked the New York Times API  for results about ‘Obama’ the New York Times API returned all matching results it would be constructing and sending way more information that is necessary. All that response construction costs server processing power which in turn costs lots of money. So, though some APIs allow you to specify exactly how many matching results you would like most will return the first ten or so and then provide you with a way to ask for the next ten and the next ten when and if you need to. This is the reason for initializing the NYTtimesShown and guardianTimesShown variables at their respective values. These numbers will go into our API queries along with our  API key and userSearchTerm to get not only results that match our query but correct packet of results that match our query. The MediaWiki Api does not require a key and has a different way of interating over its packets of results that has to to with the wikipediaContinueString variable. As the users make more API calls by scrolling through the results divs, variables will automatically increment so that our API requests update to ask for the next and then next packet of information. Every time the wikipedia API is called, the wikipediaContineString will be updated with a piece of information that wikipedia includes in its response that indicates how to get the next packet of results. The results array variables will eventually contain objects that are filled with the information that we want from the response we get back from our API calls. In most cases the API you query will respond with more information than you need. It is helpful to construct objects from the information provided by the API that include only the information you are interested in. You can then do whatever you want with these objects without having to worry about the irrelevant information provided by the API’s response. </p>
<p>Now let us look at how we use these variables to build our API query and the process the results.</p>
<figure class="highlight javascript"><figcaption><span>[jquery.js] []</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> apiCallNYT = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</div><div class="line">       $.ajax({</div><div class="line">           url: <span class="string">"http://api.nytimes.com/svc/search/v2/articlesearch.json?q="</span> + userSearchTerm.replace(<span class="string">' '</span>, <span class="string">'+'</span>) + <span class="string">"&amp;page="</span> + NYTtimesShown + <span class="string">"&amp;api-key="</span> + NYTapiKey,  </div><div class="line">           dataType: <span class="string">'json'</span>,</div><div class="line">           success: <span class="function"><span class="keyword">function</span><span class="params">(results)</span></span>{</div><div class="line">               <span class="keyword">var</span> resultsString = <span class="built_in">JSON</span>.stringify(results),</div><div class="line">                   resultsObject = results,</div><div class="line">                   documentsArray = resultsObject[<span class="string">'response'</span>][<span class="string">'docs'</span>];</div><div class="line">              </div><div class="line">               documentsArray.forEach(<span class="function"><span class="keyword">function</span><span class="params">(element, index, array)</span></span>{</div><div class="line">                   <span class="keyword">if</span> (element[<span class="string">'web_url'</span>] == <span class="literal">null</span> || element[<span class="string">'headline'</span>][<span class="string">'main'</span>] == <span class="literal">null</span> || element[<span class="string">'lead_paragraph'</span>] == <span class="literal">null</span>) {</div><div class="line">                   } <span class="keyword">else</span> {</div><div class="line">                   article = <span class="keyword">new</span> ResultsObject(element[<span class="string">'web_url'</span>], element[<span class="string">'headline'</span>][<span class="string">'main'</span>], element[<span class="string">'lead_paragraph'</span>],  NYTresultsArray.length);</div><div class="line">                   NYTresultsArray.push(article);</div><div class="line">                   }</div><div class="line">               });</div><div class="line">               resultsPrintNYT(NYTresultsArray);</div><div class="line">               NYTtimesShown++;</div><div class="line">           }</div><div class="line">       });</div><div class="line">   };</div><div class="line"></div><div class="line">   <span class="keyword">var</span> apiCallGaurdain = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{        </div><div class="line">       $.ajax({</div><div class="line">           url: <span class="string">"http://content.guardianapis.com/search?api-key="</span>+guardianApiKey+<span class="string">"&amp;show-fields=all&amp;page="</span>+ guardianTimesShown + <span class="string">"&amp;q="</span>+userSearchTerm.replace(<span class="string">' '</span>, <span class="string">'%'</span>),</div><div class="line">           dataType: <span class="string">'jsonp'</span>,</div><div class="line">           success: <span class="function"><span class="keyword">function</span><span class="params">( results )</span> </span>{</div><div class="line">           <span class="keyword">var</span> results = results;</div><div class="line">           <span class="comment">//console.log(results);</span></div><div class="line">           <span class="keyword">var</span> documentsArray = results[<span class="string">'response'</span>][<span class="string">'results'</span>];</div><div class="line">           <span class="comment">//console.log(documentsArray);</span></div><div class="line"></div><div class="line">           documentsArray.forEach(<span class="function"><span class="keyword">function</span><span class="params">(element, index, array)</span></span>{</div><div class="line">                   <span class="keyword">if</span> (element[<span class="string">'webUrl'</span>] == <span class="literal">null</span> || element[<span class="string">'webTitle'</span>] == <span class="literal">null</span> || element[<span class="string">'fields'</span>][<span class="string">'standfirst'</span>] == <span class="literal">null</span>) {</div><div class="line">                   } <span class="keyword">else</span> {</div><div class="line">                   article = <span class="keyword">new</span> ResultsObject(element[<span class="string">'webUrl'</span>], element[<span class="string">'webTitle'</span>], element[<span class="string">'fields'</span>][<span class="string">'standfirst'</span>],  guardianResultsArray.length);</div><div class="line">                   guardianResultsArray.push(article);</div><div class="line">                   }</div><div class="line">               });</div><div class="line">               resultsPrintGuardian(guardianResultsArray);</div><div class="line">               guardianTimesShown++;</div><div class="line">           }</div><div class="line">       });</div><div class="line">   };</div><div class="line"></div><div class="line">   <span class="keyword">var</span> apiCallWikipedia = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</div><div class="line">       $.ajax({</div><div class="line">           url: <span class="string">"http://en.wikipedia.org/w/api.php?format=json&amp;action=query&amp;generator=allpages&amp;gaplimit=10&amp;gapfrom="</span>+ userSearchTerm.replace(<span class="string">' '</span>, <span class="string">'+'</span>)+<span class="string">"&amp;prop=pageimages|extracts&amp;pilimit=max&amp;exintro&amp;explaintext&amp;exsentences=1&amp;exlimit=max&amp;gapcontinue="</span> + wikipediaContinueString,</div><div class="line">           dataType: <span class="string">'jsonp'</span>,</div><div class="line">           success: <span class="function"><span class="keyword">function</span><span class="params">(results)</span> </span>{</div><div class="line">           <span class="keyword">var</span> results = results;</div><div class="line">           <span class="built_in">console</span>.log(results);</div><div class="line">           <span class="keyword">var</span> documentsArray = results[<span class="string">'query'</span>][<span class="string">'pages'</span>];</div><div class="line">           <span class="built_in">console</span>.log(documentsArray);</div><div class="line">           <span class="built_in">console</span>.log(<span class="keyword">typeof</span> documentsArray);</div><div class="line">           wikipediaContinueString = results[<span class="string">'query-continue'</span>][<span class="string">'allpages'</span>][<span class="string">'gapcontinue'</span>];</div><div class="line"></div><div class="line">           <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> documentsArray) {</div><div class="line">               <span class="keyword">if</span> (documentsArray.hasOwnProperty(prop)){</div><div class="line">                   article = <span class="keyword">new</span> ResultsObject( <span class="string">"https://en.wikipedia.org/wiki/"</span>+ <span class="built_in">encodeURI</span>(documentsArray[prop][<span class="string">'title'</span>]), documentsArray[prop][<span class="string">'title'</span>], documentsArray[prop][<span class="string">'extract'</span>],  wikipediaResultsArray.length)</div><div class="line">                   wikipediaResultsArray.push(article);</div><div class="line">               }</div><div class="line">           }</div><div class="line">                resultsPrintWikipedia(wikipediaResultsArray);</div><div class="line">                <span class="built_in">console</span>.log(wikipediaResultsArray);</div><div class="line">           }</div><div class="line">       });</div><div class="line">   }</div></pre></td></tr></table></figure>

<p>The three apiCall functions above comunicate with their respective APIs by creating a JavaScript XMLHttpRequest object. This allows our application to ask for and receive information from the API’s server without refresing our page. This technology is called AJAX which stands for Asynchronous JavaScript and XML. To learn more about AJAX check out this <a href="http://www.w3schools.com/php/php_ajax_intro.asp" target="_blank" rel="external">AJAX introduction on w3 schools</a>. Essentially what is happening in the three apiCall functions above is a request is constructed by the url: properties on lines three. twenty-five, and forty-eaight, and then the results of that request, <a href="http://www.w3schools.com/json/" target="_blank" rel="external">a JSON object</a>, are processed in the success functions that start on lines five, twenty-seven, and fifty. The results argument that is passed into these functions is the JSON object that in turn is the response sent back by the API. The url is the query which defines what the response will be. I have left some console.logs in the code so that if you open up a console while running the application you can see what the results object is before we process it into our objects. Let us first examine the url properties of our three JavaScript XMLHttpRequest objects.  </p>
<figure class="highlight javascript"><figcaption><span>[jquery.js] []</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">url: <span class="string">"http://api.nytimes.com/svc/search/v2/articlesearch.json?q="</span> + userSearchTerm.replace(<span class="string">' '</span>, <span class="string">'+'</span>) + <span class="string">"&amp;page="</span> + NYTtimesShown + <span class="string">"&amp;api-key="</span> + NYTapiKey,</div><div class="line">url: <span class="string">"http://content.guardianapis.com/search?api-key="</span>+guardianApiKey+<span class="string">"&amp;show-fields=all&amp;page="</span>+ guardianTimesShown + <span class="string">"&amp;q="</span>+userSearchTerm.replace(<span class="string">' '</span>, <span class="string">'%'</span>),</div><div class="line">url: <span class="string">"http://en.wikipedia.org/w/api.php?format=json&amp;action=query&amp;generator=allpages&amp;gaplimit=10&amp;gapfrom="</span>+ userSearchTerm.replace(<span class="string">' '</span>, <span class="string">'+'</span>)+<span class="string">"&amp;prop=pageimages|extracts&amp;pilimit=max&amp;exintro&amp;explaintext&amp;exsentences=1&amp;exlimit=max&amp;gapcontinue="</span> + wikipediaContinueString,</div></pre></td></tr></table></figure>


<p>The urls above are requests sent to the servers of the API we are querying. Notice that these queries are dynamic (they are the result of concatenating our variables into the generic url request used to talk to the APIs). You could replace userSearchTerm.replace(‘ ‘, ‘+’) above with your own hard coded search query, but then every time you called the API call function you would get results only for that query. As the user sets this variable by hitting enter on the user search bar our queries will ask for results that are relevant to that query. You need to call replace(‘ ‘, ‘+’) on the userSearch term to remove blank space from the query and instead use the recognized blank space substitute, a ‘+’’ sign. We also pass variables in for the apiKey and the number of times shown. The Api key will validate our request with the API and the times shown will tell the API which packet of results we want to see. Wikipedia wants you to set a string equal to a property of the object it sends back and then append that string the to the continue field of the request ignored to get the next packet of information. </p>
<p>Now let’s look at what what we do with the results sent back to us once we have successfully constructed and sent our queries.  </p>
<figure class="highlight javascript"><figcaption><span>[jquery.js] []</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">success: <span class="function"><span class="keyword">function</span><span class="params">(results)</span></span>{</div><div class="line">                <span class="keyword">var</span> resultsString = <span class="built_in">JSON</span>.stringify(results),</div><div class="line">                    resultsObject = results,</div><div class="line">                    documentsArray = resultsObject[<span class="string">'response'</span>][<span class="string">'docs'</span>];</div><div class="line">               </div><div class="line">                documentsArray.forEach(<span class="function"><span class="keyword">function</span><span class="params">(element, index, array)</span></span>{</div><div class="line">                    <span class="keyword">if</span> (element[<span class="string">'web_url'</span>] == <span class="literal">null</span> || element[<span class="string">'headline'</span>][<span class="string">'main'</span>] == <span class="literal">null</span> || element[<span class="string">'lead_paragraph'</span>] == <span class="literal">null</span>) {</div><div class="line">                    } <span class="keyword">else</span> {</div><div class="line">                    article = <span class="keyword">new</span> ResultsObject(element[<span class="string">'web_url'</span>], element[<span class="string">'headline'</span>][<span class="string">'main'</span>], element[<span class="string">'lead_paragraph'</span>],  NYTresultsArray.length);</div><div class="line">                    NYTresultsArray.push(article);</div><div class="line">                    }</div><div class="line">                });</div><div class="line">                resultsPrintNYT(NYTresultsArray);</div><div class="line">                NYTtimesShown++;</div><div class="line">            }</div><div class="line"></div><div class="line">success: <span class="function"><span class="keyword">function</span><span class="params">(results)</span> </span>{</div><div class="line">            <span class="keyword">var</span> results = results;</div><div class="line">            <span class="comment">//console.log(results);</span></div><div class="line">            <span class="keyword">var</span> documentsArray = results[<span class="string">'response'</span>][<span class="string">'results'</span>];</div><div class="line">            <span class="comment">//console.log(documentsArray);</span></div><div class="line"></div><div class="line">            documentsArray.forEach(<span class="function"><span class="keyword">function</span><span class="params">(element, index, array)</span></span>{</div><div class="line">                    <span class="keyword">if</span> (element[<span class="string">'webUrl'</span>] == <span class="literal">null</span> || element[<span class="string">'webTitle'</span>] == <span class="literal">null</span> || element[<span class="string">'fields'</span>][<span class="string">'standfirst'</span>] == <span class="literal">null</span>) {</div><div class="line">                    } <span class="keyword">else</span> {</div><div class="line">                    article = <span class="keyword">new</span> ResultsObject(element[<span class="string">'webUrl'</span>], element[<span class="string">'webTitle'</span>], element[<span class="string">'fields'</span>][<span class="string">'standfirst'</span>],  guardianResultsArray.length);</div><div class="line">                    guardianResultsArray.push(article);</div><div class="line">                    }</div><div class="line">                });</div><div class="line">                resultsPrintGuardian(guardianResultsArray);</div><div class="line">                guardianTimesShown++;</div><div class="line">            }</div><div class="line"></div><div class="line"> success: <span class="function"><span class="keyword">function</span><span class="params">(results)</span> </span>{</div><div class="line">            <span class="keyword">var</span> results = results;</div><div class="line">            <span class="built_in">console</span>.log(results);</div><div class="line">            <span class="keyword">var</span> documentsArray = results[<span class="string">'query'</span>][<span class="string">'pages'</span>];</div><div class="line">            <span class="built_in">console</span>.log(documentsArray);</div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">typeof</span> documentsArray);</div><div class="line">            wikipediaContinueString = results[<span class="string">'query-continue'</span>][<span class="string">'allpages'</span>][<span class="string">'gapcontinue'</span>];</div><div class="line"></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> documentsArray) {</div><div class="line">                <span class="keyword">if</span> (documentsArray.hasOwnProperty(prop)){</div><div class="line">                    article = <span class="keyword">new</span> ResultsObject( <span class="string">"https://en.wikipedia.org/wiki/"</span>+ <span class="built_in">encodeURI</span>(documentsArray[prop][<span class="string">'title'</span>]), documentsArray[prop][<span class="string">'title'</span>], documentsArray[prop][<span class="string">'extract'</span>],  wikipediaResultsArray.length)</div><div class="line">                    wikipediaResultsArray.push(article);</div><div class="line">                }</div><div class="line">            }</div><div class="line">                 resultsPrintWikipedia(wikipediaResultsArray);</div><div class="line">                 <span class="built_in">console</span>.log(wikipediaResultsArray);</div><div class="line">            }</div></pre></td></tr></table></figure>

<p>Here, in all three of the success functions we create a documentsArray that is filled with only the parts of the response object that we are interested in. Note that while lines four, twenty, thirty-seven all accomplish this they do so in different ways. This is because the responses sent back from the three different APIs are formatted differently. You can console.log out the results object sent back to you as I do for the results from the wikipedia API on line thirty eight to inspect it and see what parts of it are relevant to what you want to display on the page. In my case, the responses all contained an array of the title text, web url, and text summary or lead paragraph that I wanted to display so I simply set this information equal to my own documentsArray. Then the success functions iterate over the documentsArray parsing the relevant information from those arrays into objects and then pushing those objects into my own array. While it may seem convoluted to parse an array of objects that is given to you into your own array of slightly different objects it would be very useful if you wanted to store these objects in your database or perform more operations on them than my app currently does. The constructor for the results object is below. You will see that that lines nine, twenty-six, and forty-four of the above code create new objects with only the properties we want from each of the objects in the documentsArray. </p>
<figure class="highlight javascript"><figcaption><span>[jquery.js] []</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ResultsObject</span><span class="params">(url, headline, leadParagraph, index)</span> </span>{</div><div class="line">        <span class="keyword">this</span>.url = url;</div><div class="line">        <span class="keyword">this</span>.headline = headline;</div><div class="line">        <span class="keyword">this</span>.leadParagraph = leadParagraph;</div><div class="line">        <span class="keyword">this</span>.index = index;</div><div class="line">    }</div></pre></td></tr></table></figure>


<p>Now, every time we run our apiCall functions they will create objects from the responses that contain only the information we want from those responses and place those objects into arrays that correspond to the API that the responses are from. All that’s left is to iterate over our arrays of objects and append them to the correct place in the DOM. This operation is accomplished in the print results functions which are called by the apiCall functions after they have constructed their resultsArrays. The results print functions are below. </p>
<figure class="highlight javascript"><figcaption><span>[jquery.js] []</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> resultsPrintNYT = <span class="function"><span class="keyword">function</span><span class="params">(resultsArray)</span></span>{</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; resultsArray.length; i++){</div><div class="line">            <span class="keyword">if</span> (resultsArray[i] !== <span class="literal">undefined</span>) {</div><div class="line">                $(<span class="string">"&lt;tr id='NYTresult"</span>+resultsArray[i].index+<span class="string">"'&gt;&lt;td class='text-left NYTresult'&gt;&lt;a href='"</span> + resultsArray[i].url + <span class="string">"'&gt;"</span> + resultsArray[i].headline +<span class="string">"&lt;/a&gt;&lt;p&gt;"</span> + resultsArray[i].leadParagraph + <span class="string">"&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;"</span>).insertBefore(<span class="string">'#NYT-last-row'</span>);</div><div class="line">            } </div><div class="line">        }</div><div class="line">    };</div><div class="line"><span class="keyword">var</span> resultsPrintGuardian = <span class="function"><span class="keyword">function</span><span class="params">(resultsArray)</span></span>{</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; resultsArray.length; i++){</div><div class="line">            <span class="keyword">if</span> (resultsArray[i] !== <span class="literal">undefined</span>) {</div><div class="line">                $(<span class="string">"&lt;tr id='guardianResult"</span>+resultsArray[i].index+<span class="string">"'&gt;&lt;td class='text-left guardianResult'&gt;&lt;a href='"</span> + resultsArray[i].url + <span class="string">"'&gt;"</span> + resultsArray[i].headline +<span class="string">"&lt;/a&gt;&lt;p&gt;"</span> + resultsArray[i].leadParagraph + <span class="string">"&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;"</span>).insertBefore(<span class="string">'#guardian-last-row'</span>);</div><div class="line">            } </div><div class="line">        }</div><div class="line">    };</div><div class="line"><span class="keyword">var</span> resultsPrintWikipedia = <span class="function"><span class="keyword">function</span><span class="params">(resultsArray)</span></span>{</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; resultsArray.length; i++){</div><div class="line">            <span class="keyword">if</span> (resultsArray[i] !== <span class="literal">undefined</span>) {</div><div class="line"></div><div class="line">                $(<span class="string">"&lt;tr id='wikipeidaResult"</span>+resultsArray[i].index+<span class="string">"'&gt;&lt;td class='text-left wikipediaResult'&gt;&lt;a href='"</span> + resultsArray[i].url + <span class="string">"'&gt;"</span> + resultsArray[i].headline +<span class="string">"&lt;/a&gt;&lt;p&gt;"</span> + resultsArray[i].leadParagraph + <span class="string">"&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;"</span>).insertBefore(<span class="string">'#wikipedia-last-row'</span>);</div><div class="line">            } </div><div class="line">        }</div><div class="line">    };</div></pre></td></tr></table></figure>


<p>The results print functions above will take our resultsArrays and iterate over them creating new table rows for our results display divs and then inserting them. The result is that the relevant properties of all the objects in our results arrays are displayed in the correct position in the DOM. And we’re done! A fully functioning AJAX powered API search engine!</p>
<p>If you have reached this point and are looking to make improvements here are a few suggestions: </p>
<ul>
<li>Right now the results from the different API calls display as soon as they are processed. As the different API calls take different amounts of time to complete it means that front end is not as clean as it could be. It could look much better if all the results displayed at the same time. Look into <a>jQuerys When Then</a> to accomplish this though there are a number of other ways!</li>
<li>Add another API… or ten other API’s … or look into <a>YQL</a> witch might be able to let you return results not from a specific API but from YAHOO’s search engine. </li>
<li>Add a feature where the users can add and delete APIs from the results they see. Maybe some people want results from The New York Times but not from Wikipedia for example. </li>
</ul>
<ul>
<li>reach out to me at my <a>github benjaminconant</a> or email conantbenjamin@gmail.com if you would like to be added as a collaborator on the project!</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>APIs are a hot topic for developers and entrepreneurs alike. An API is a way for different applications to communicate with each other by]]>
    </summary>
    
  </entry>
  
</feed>
